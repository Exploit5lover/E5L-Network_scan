#!/bin/bash

# Advanced Network Vulnerability Scan Script
# Performs comprehensive scanning for vulnerabilities, CVEs, and exploits
# Usage: ./advanced_network_scan.sh <network_range> <vulners_api_key>
# Example: ./advanced_network_scan.sh 199.182.216.0/22 <your_vulners_api_key>

# Check for arguments
if [ -z "$1" ] || [ -z "$2" ]; then
  echo "Usage: $0 <network_range> <vulners_api_key>"
  echo "Example: $0 199.182.216.0/22 <your_vulners_api_key>"
  exit 1
fi

NETWORK_RANGE="$1"
VULNERS_API_KEY="$2"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
REPORT_DIR="adv_scan_report_$TIMESTAMP"
REPORT_FILE="$REPORT_DIR/advanced_scan_report_$TIMESTAMP.md"
TEMP_DIR="/tmp/adv_scan_$TIMESTAMP"

# Create directories
mkdir -p "$REPORT_DIR" "$TEMP_DIR"
touch "$REPORT_FILE"

# Initialize report
cat <<EOL > "$REPORT_FILE"
# Advanced Network Vulnerability Scan Report
**Date:** $(date)
**Target Network:** $NETWORK_RANGE
**Generated by:** Advanced Network Scan Script

## Executive Summary
This report details findings from an advanced security scan on $NETWORK_RANGE, including open ports, service vulnerabilities, CVEs, and exploitability. Findings are prioritized by severity (Critical, High, Medium, Low).

EOL

# Function to check if a tool is installed
check_tool() {
  if ! command -v "$1" &> /dev/null; then
    echo "Error: $1 is not installed. Please install it and try again."
    exit 1
  fi
}

# Check for required tools
check_tool masscan
check_tool nmap
check_tool openvas
check_tool nikto
check_tool msfconsole
check_tool curl
check_tool jq

# 1. Masscan: Rapid host discovery
echo "Running Masscan for host discovery on $NETWORK_RANGE..."
masscan -p1-65535,U:1-65535 --rate=1000 "$NETWORK_RANGE" --output-format grepable --output-filename "$TEMP_DIR/masscan.grep" > /dev/null 2>&1
LIVE_HOSTS=$(cat "$TEMP_DIR/masscan.grep" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | sort -u)
echo "Live hosts found: $LIVE_HOSTS"
echo "## Host Discovery (Masscan)" >> "$REPORT_FILE"
echo "**Command:** masscan -p1-65535,U:1-65535 --rate=1000 $NETWORK_RANGE" >> "$REPORT_FILE"
echo "**Live Hosts:** $(echo $LIVE_HOSTS | tr ' ' ',')" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# 2. Nmap: Detailed port scanning with NSE scripts
echo "Running Nmap with NSE scripts..."
echo "## Nmap Detailed Scan Results" >> "$REPORT_FILE"
for HOST in $LIVE_HOSTS; do
  echo "Scanning $HOST with Nmap..."
  nmap -sS -sV -O -A --script=vuln -oA "$REPORT_DIR/nmap_$HOST" "$HOST" > /dev/null 2>&1
  echo "### Host: $HOST" >> "$REPORT_FILE"
  echo "**OS Detection:**" >> "$REPORT_FILE"
  grep -i "os cpe" "$REPORT_DIR/nmap_$HOST.xml" >> "$REPORT_FILE" 2>/dev/null || echo "No OS details detected" >> "$REPORT_FILE"
  echo "**Open Ports and Services:**" >> "$REPORT_FILE"
  grep -E "open.*tcp" "$REPORT_DIR/nmap_$HOST.nmap" >> "$REPORT_FILE" 2>/dev/null
  echo "**Vulnerability Findings (NSE):**" >> "$REPORT_FILE"
  grep -i "vuln" "$REPORT_DIR/nmap_$HOST.xml" | grep -oE "CVE-[0-9]{4}-[0-9]+" | sort -u >> "$REPORT_FILE" 2>/dev/null || echo "No NSE vulnerabilities found" >> "$REPORT_FILE"
  echo "" >> "$REPORT_FILE"
done

# 3. OpenVAS: Advanced vulnerability scanning with custom profile
echo "Running OpenVAS with Full and Fast profile..."
echo "## OpenVAS Vulnerability Scan Results" >> "$REPORT_FILE"
for HOST in $LIVE_HOSTS; do
  echo "Scanning $HOST with OpenVAS..."
  # Use Full and Fast profile for comprehensive scanning
  openvas --target="$HOST" --scan-profile="Full and fast" --format=xml > "$REPORT_DIR/openvas_$HOST.xml" 2>/dev/null
  echo "### Host: $HOST" >> "$REPORT_FILE"
  # Parse for critical/high severity vulnerabilities and CVEs
  if [ -s "$REPORT_DIR/openvas_$HOST.xml" ]; then
    echo "**Critical/High Vulnerabilities:**" >> "$REPORT_FILE"
    grep -E "severity.*(critical|high)" "$REPORT_DIR/openvas_$HOST.xml" >> "$REPORT_FILE" 2>/dev/null || echo "No critical/high vulnerabilities found" >> "$REPORT_FILE"
    echo "**CVEs:**" >> "$REPORT_FILE"
    grep -i "cve" "$REPORT_DIR/openvas_$HOST.xml" | grep -oE "CVE-[0-9]{4}-[0-9]+" | sort -u >> "$REPORT_FILE" 2>/dev/null || echo "No CVEs found" >> "$REPORT_FILE"
  else
    echo "No vulnerabilities found for $HOST" >> "$REPORT_FILE"
  fi
  echo "" >> "$REPORT_FILE"
done

# 4. Nikto: Web server scanning with advanced options
echo "Running Nikto on web servers..."
echo "## Nikto Web Server Scan Results" >> "$REPORT_FILE"
for HOST in $LIVE_HOSTS; do
  if nmap -p80,443 "$HOST" | grep -q "open"; then
    echo "Scanning $HOST with Nikto..."
    nikto -h "$HOST" -Tuning x -output "$REPORT_DIR/nikto_$HOST.txt" > /dev/null 2>&1
    echo "### Host: $HOST" >> "$REPORT_FILE"
    if [ -s "$REPORT_DIR/nikto_$HOST.txt" ]; then
      echo "**Findings:**" >> "$REPORT_FILE"
      grep -E "OSVDB|CVE" "$REPORT_DIR/nikto_$HOST.txt" >> "$REPORT_FILE" 2>/dev/null || echo "No web vulnerabilities found" >> "$REPORT_FILE"
    else
      echo "No web server vulnerabilities found for $HOST" >> "$REPORT_FILE"
    fi
    echo "" >> "$REPORT_FILE"
  fi
done

# 5. Metasploit: Exploit validation for critical CVEs
echo "Running Metasploit for exploit validation..."
echo "## Metasploit Exploit Validation" >> "$REPORT_FILE"
for HOST in $LIVE_HOSTS; do
  CVES=$(cat "$REPORT_DIR/nmap_$HOST.xml" "$REPORT_DIR/openvas_$HOST.xml" 2>/dev/null | grep -oE "CVE-[0-9]{4}-[0-9]+" | sort -u)
  if [ -n "$CVES" ]; then
    echo "### Host: $HOST" >> "$REPORT_FILE"
    for CVE in $CVES; do
      echo "Checking $CVE for $HOST..."
      # Create temporary Metasploit resource script
      cat <<EOL2 > "$TEMP_DIR/msf_$HOST_$CVE.rc"
use auxiliary/scanner
search cve:$CVE
set RHOSTS $HOST
run
exit
EOL2
      msfconsole -q -r "$TEMP_DIR/msf_$HOST_$CVE.rc" > "$REPORT_DIR/msf_$HOST_$CVE.txt" 2>/dev/null
      echo "**CVE: $CVE**" >> "$REPORT_FILE"
      if grep -q "Vulnerable" "$REPORT_DIR/msf_$HOST_$CVE.txt"; then
        echo "Exploit available and potentially successful" >> "$REPORT_FILE"
      else
        echo "No exploitable modules found or not vulnerable" >> "$REPORT_FILE"
      fi
    done
    echo "" >> "$REPORT_FILE"
  fi
done

# 6. Vulners API: CVE enrichment
echo "Enriching CVEs with Vulners API..."
echo "## CVE Enrichment (Vulners API)" >> "$REPORT_FILE"
ALL_CVES=$(cat "$REPORT_DIR"/*.xml "$REPORT_DIR"/*.txt 2>/dev/null | grep -oE "CVE-[0-9]{4}-[0-9]+" | sort -u)
for CVE in $ALL_CVES; do
  echo "Querying $CVE..."
  curl -s "https://vulners.com/api/v3/search/id/?id=$CVE" -H "X-Vulners-API-Key: $VULNERS_API_KEY" > "$TEMP_DIR/cve_$CVE.json"
  if [ -s "$TEMP_DIR/cve_$CVE.json" ]; then
    echo "### $CVE" >> "$REPORT_FILE"
    DESCRIPTION=$(jq -r '.data.description' "$TEMP_DIR/cve_$CVE.json" 2>/dev/null || echo "No description available")
    SCORE=$(jq -r '.data.cvss.score' "$TEMP_DIR/cve_$CVE.json" 2>/dev/null || echo "N/A")
    echo "**Description:** $DESCRIPTION" >> "$REPORT_FILE"
    echo "**CVSS Score:** $SCORE" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
  fi
done

# 7. Prioritization and Remediation
echo "## Prioritized Findings and Remediation" >> "$REPORT_FILE"
echo "| Host | Vulnerability | CVE | Severity | Remediation |" >> "$REPORT_FILE"
echo "|------|---------------|-----|----------|-------------|" >> "$REPORT_FILE"
for HOST in $LIVE_HOSTS; do
  if [ -s "$REPORT_DIR/openvas_$HOST.xml" ]; then
    grep -E "severity.*(critical|high)" "$REPORT_DIR/openvas_$HOST.xml" | while read -r line; do
      CVE=$(echo "$line" | grep -oE "CVE-[0-9]{4}-[0-9]+" || echo "N/A")
      SEVERITY=$(echo "$line" | grep -oE "critical|high")
      VULN_DESC=$(echo "$line" | grep -oE "name=\"[^\"]+\"" | cut -d'"' -f2)
      REMEDIATION="Apply latest patches or consult vendor advisory for $CVE"
      echo "| $HOST | $VULN_DESC | $CVE | $SEVERITY | $REMEDIATION |" >> "$REPORT_FILE"
    done
  fi
done
echo "" >> "$REPORT_FILE"

# Finalize report
echo "## Conclusion" >> "$REPORT_FILE"
echo "The advanced scan identified critical vulnerabilities, open ports, and potential exploits. Prioritize remediation of critical and high-severity issues. Validate findings in a test environment before applying fixes." >> "$REPORT_FILE"

# Clean up temporary files
rm -rf "$TEMP_DIR"

echo "Advanced scan completed. Report generated at $REPORT_FILE"
